{"version":3,"sources":["components/box-time/BoxTime.js","components/box-day/BoxDay.js","components/clock-container/ClockContainer.js","App.js","serviceWorker.js","index.js"],"names":["BoxTime","props","className","time","hours","minutes","id","seconds","noonState","BoxDay","date","ClockContainer","toggleCount","countClick","state","toggleBackground","setState","rand","Math","round","random","document","querySelector","style","backgroundColor","renderTable","timeNew","createDate","day","checkNumber","month","year","forDate","number","getDay","this","timerID","setInterval","getTime","clearInterval","Date","getHours","getMinutes","getSeconds","newDate","getDate","getMonth","getFullYear","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fa7f5d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './BoxTime.scss';\r\n\r\nconst BoxTime = (props) => {\r\n    return (\r\n        <div className='BoxTime'>\r\n            {props.time.hours}:{props.time.minutes} {props.id ===0 ? \":\" + props.time.seconds:null} {props.time.noonState}\r\n        </div>\r\n    )\r\n};\r\nexport default BoxTime;","import React from 'react';\r\nimport './BoxDay.scss'\r\n\r\n\r\nconst BoxDay = (props) => {\r\n    return (\r\n        <div className='BoxDay'>\r\n            {props.date}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BoxDay;","import React, {Component} from 'react';\r\nimport './ClockContainer.scss';\r\nimport BoxTime from \"../box-time/BoxTime\";\r\nimport BoxDay from \"../box-day/BoxDay\";\r\n\r\n\r\nclass ClockContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timeNew: {\r\n                hours: 0,\r\n                minutes: 0,\r\n                seconds: 0,\r\n                noonState: '',\r\n            },\r\n            date: this.getDay(),\r\n            countClick: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(() =>\r\n            this.getTime(), 50\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    //time update\r\n    getTime() {\r\n        const time = new Date();\r\n        //set time hours, minutes and second\r\n        let hours = this.checkNumber(time.getHours());\r\n        let minutes = this.checkNumber(time.getMinutes());\r\n        let seconds = this.checkNumber(time.getSeconds());\r\n        const noonState = hours <= 12 ? 'AM' : 'PM';\r\n        const timeNew = {hours, minutes, seconds, noonState};\r\n        this.setState({\r\n            timeNew\r\n        })\r\n    }\r\n\r\n//get day today\r\n    getDay() {\r\n        const newDate = new Date();\r\n        const day = newDate.getDate();\r\n        const month = newDate.getMonth() + 1;\r\n        const year = newDate.getFullYear();\r\n        const date = {day, month, year};\r\n        return date\r\n    }\r\n\r\n    //toggleCount\r\n    toggleCount = () => {\r\n        let countClick = this.state.countClick;\r\n        this.toggleBackground();\r\n        if (countClick === 0 || countClick < 3) {\r\n            this.setState({countClick: countClick + 1})\r\n        } else {\r\n            this.setState({countClick: 0});\r\n        }\r\n    };\r\n    toggleBackground = ()=>{\r\n        let rand = Math.round(1 - 0.5 + Math.random() * (7 - 3 + 1));\r\n        const color = ['#d3d896', '#36274c', '#990549', '#d41888', '#0096a7', '#1f693d', '#fe5923'];\r\n        const divContainer = document.querySelector('.ClockContainer');\r\n        divContainer.style.backgroundColor = color[rand];\r\n    };\r\n\r\n    //view our clock or date\r\n    renderTable = () => {\r\n        switch (this.state.countClick) {\r\n            case 0:\r\n                return <BoxTime time={this.state.timeNew}/>;\r\n            case 1:\r\n                return <BoxDay date={this.createDate()}/>;\r\n            case 2:\r\n                return <BoxDay date={this.createDate()}/>;\r\n            case 3:\r\n                return <BoxTime time={this.state.timeNew} id={0}/>;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    createDate = () => {\r\n        if (this.state.countClick === 1) {\r\n            let day= this.checkNumber(this.state.date.day);\r\n            let month= this.checkNumber(this.state.date.month);\r\n            let year= this.checkNumber(this.state.date.year);\r\n            return `${day}/${month}/${year}`;\r\n        }else {\r\n            return this.forDate();\r\n        }\r\n    };\r\n\r\n    forDate=()=>{\r\n        const monthsArr = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let day= this.state.date.day;\r\n        let month= this.state.date.month;\r\n        let year= this.state.date.year;\r\n        let dataNew = `${monthsArr[month]}\\n ${day}th ${year}`;\r\n        return dataNew;\r\n    };\r\n\r\n    checkNumber=(number)=>{\r\n        if (number < 10) {\r\n            return `0${number}`;\r\n        } else {\r\n           return `${number}`;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='ClockContainer' onClick={this.toggleCount}>\r\n                {this.renderTable()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClockContainer;","import React from 'react';\r\nimport './App.scss';\r\nimport ClockContainer from \"./components/clock-container/ClockContainer\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <ClockContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}